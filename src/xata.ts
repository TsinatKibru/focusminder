// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "task",
    columns: [
      { name: "name", type: "string" },
      { name: "project", type: "string" },
      { name: "category", type: "string" },
      { name: "duedate", type: "datetime" },
      { name: "doitsomeday", type: "bool" },
      { name: "userid", type: "string", notNull: true, defaultValue: "null" },
    ],
  },
  {
    name: "setting",
    columns: [
      { name: "userid", type: "string", notNull: true, defaultValue: "null" },
      { name: "pomodorotime", type: "int", notNull: true, defaultValue: "25" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Task = InferredTypes["task"];
export type TaskRecord = Task & XataRecord;

export type Setting = InferredTypes["setting"];
export type SettingRecord = Setting & XataRecord;

export type DatabaseSchema = {
  task: TaskRecord;
  setting: SettingRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Alex-s-workspace-2hlmmv.us-east-1.xata.sh/db/pomodorodb",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
